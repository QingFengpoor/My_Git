
#coding=utf-8

#load news data

from sklearn.datasets import fetch_20newsgroups

#-------------

from sklearn.model_selection import train_test_split

#-------------

from sklearn.feature_extraction.text import CountVectorizer

#-------------

from sklearn.naive_bayes import MultinomialNB

#-------------

from sklearn.metrics import classification_report

import  numpy as np
import  matplotlib.pyplot as plt


#-------------download data

news=fetch_20newsgroups(subset='all')

print(len(news.data))

print(news.data[0])

#-------------split data

#75% training set,25% testing set

X_train,X_test,y_train,y_test=train_test_split(news.data,news.target,test_size=0.25,random_state=33)

#-------------transfer data to vector

vec=CountVectorizer()

X_train=vec.fit_transform(X_train)

#print(X_train.toarray())
#X_test=vec.fit_transform(X_test)  raise ValueError('dimension mismatch')

vectorizer_test = CountVectorizer(vocabulary=vec.vocabulary_)

X_test = vectorizer_test.transform(X_test)

#-------------training

#initialize NB model with default config

mnb=MultinomialNB()

#training model

mnb.fit(X_train,y_train)

#run on test data

y_predict=mnb.predict(X_test)

#-------------performance

print ('The Accuracy is',mnb.score(X_test,y_test))

def to_table(report):
    report = report.splitlines()
    res = []
    res.append(['']+report[0].split())
    for row in report[2:-2]:
       res.append(row.split())
    lr = report[-1].split()
    res.append([' '.join(lr[:3])]+lr[3:])
    return np.array(res)
clre=to_table(classification_report(y_test,y_predict,target_names=news.target_names))
pr=[]
nclass=[]
for i in range(10):
    if(clre[i+1]!=[]):
        pr.append(float(clre[i+1][1]))
        nclass.append(clre[i+1][0])
print(pr)
b=plt.barh(nclass,pr)
plt.xlim(0.5,1)
for rect in b:
    w=rect.get_width()
    plt.text(w,rect.get_y()+rect.get_height()/2,'%.2f'%w,ha='left',va='center')
plt.show()
